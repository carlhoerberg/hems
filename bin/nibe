#!/usr/bin/env ruby
require "socket"
require "webrick"
require "zlib"
require "logger"

$log = Logger.new($stdout, level: Logger::INFO)
$log.formatter = proc { |sev, time, progname, msg| "#{msg}\n" }

class Nibe
  def self.run
    metrics = {
      40004 => { name: "bt1_outdoor_temp", type: "s<", factor: 10.0 }, # outdoor temp
      40008 => { name: "bt2_supply_temp", type: "s<", factor: 10.0 }, # supply temp
      40012 => { name: "bt3_return_temp", type: "s<", factor: 10.0 }, # return temp
      40013 => { name: "bt7_hot_water_top", type: "s<", factor: 10.0 }, # hot water top
      40014 => { name: "bt6_hot_water_load", type: "s<", factor: 10.0 }, # hot water load
      40025 => { name: "bt20_exhaust_air_temp", type: "s<", factor: 10.0 }, # exhaust air temp
      40026 => { name: "bt21_vented_air_temp", type: "s<", factor: 10.0 }, # vented air temp
      40051 => { name: "bs1_air_flow", type: "s<", factor: 10.0 }, # air flow (unfiltered)
      40321 => { name: "compressor_frequency", type: "S<" },
      43084 => { name: "electrical_addition", type: "s<", factor: 100.0 },
      43416 => { name: "compressor_starts", type: "l<" },
      43437 => { name: "pump_speed", type: "C" },
      45001 => { name: "alarm", type: "s<" },
      43141 => { name: "compressor_power", type: "S<" },
      41846 => { name: "energy_ventilation", type: "L<", factor: 10.0 },
      41848 => { name: "energy_hot_water", type: "L<", factor: 10.0 },
      41850 => { name: "energy_heating", type: "L<", factor: 10.0 },
      43066 => { name: "defrosting_time", type: "l<" },
      44298 => { name: "heat_meter_hot_water_compressor_and_addition", type: "L<", factor: 10.0 },
      44300 => { name: "heat_meter_heat_compressor_and_addition", type: "L<", factor: 10.0 },
      44306 => { name: "heat_meter_hot_water_compressor", type: "L<", factor: 10.0 },
      44308 => { name: "heat_meter_heat_compressor", type: "L<", factor: 10.0 },
    }

    Thread.new { WebServer.new(metrics).start }
    NibeTCP.new.read_loop(metrics)
  end

  class WebServer
    def initialize(metrics)
      @server = WEBrick::HTTPServer.new(Port: ENV.fetch("PORT", 6730).to_i,
                                        AccessLog: [])
      @server.mount_proc("/metrics") do |req, res|
        res.content_type = "text/plain"
        values = metrics.values.select { |v| v[:ts] }
        output = @@nibe.result_with_hash({ values: })
        if req.accept_encoding.include? "gzip"
          res["content-encoding"] = "gzip"
          res.body = Zlib.gzip(output)
        else
          res.body = output
        end
      end
    end

    def start
      @server.start
    end

    @@nibe = ERB.new(File.read(File.join(__dir__, "..", "views", "nibe.erb")))
  end

  class NibeTCP
    def initialize(host = "192.168.3.134", port = 730)
      @host = host
      @port = port
    end

    def read_loop(metrics)
      loop do
        socket = Socket.tcp(@host, @port, connect_timeout: 1)
        socket.setsockopt(Socket::IPPROTO_TCP, Socket::TCP_NODELAY, 1)
        $log.info "Connected"
        loop do
          case byte = socket.readbyte
          when 0x06 # ack
            $log.debug "acked"
          when 0x15 # nack
            $log.error "nacked"
          when 0x5C # start of msg
            null = socket.readbyte
            if null != 0x0
              $log.debug "unexpected value after 0x5c: 0x#{null.to_s(16)}"
              next
            end
            $log.debug "start_of_msg"
            device = socket.readbyte
            command = socket.readbyte
            data_len = socket.readbyte

            data = socket.read(data_len)
            msg_checksum = socket.readbyte

            msg = [device, command, data_len, data].pack("CCCa*")
            calc_checksum = checksum(msg)

            if msg_checksum != calc_checksum
              $log.error "checksum_mismatch msg=#{msg_checksum.to_s(16)} calc=#{calc_checksum.to_s(16)} command=0x#{command.to_s(16)} len=#{data_len}"
              $log.debug { IO::Buffer.for(data).hexdump } unless data.empty?
              # nack(socket)
              next
            end

            if device != 0x20
              $log.warn "unexpected_device=0x#{device.to_s(16)} command=0x#{command.to_s(16)} len=#{data_len}"
              $log.warn { IO::Buffer.for(data).hexdump } unless data.empty?
              ack(socket)
              next
            end

            case command
            when 0x6B # write request
              $log.debug "write_request"
              ack(socket)
            when 0x69 # read request
              last_updated_addr = 0
              min_ts = Time.now.to_f * 1000 + 1000
              metrics.each do |addr, v|
                if (requested = v[:requested])
                  if Time.now.to_i - 2 > requested
                    v.delete :requested # if no response in a long time then request it again
                  else
                    next
                  end
                end
                if v[:ts].nil?
                  last_updated_addr = addr
                  break
                end
                if v[:ts] < min_ts
                  last_updated_addr = addr
                  min_ts = v[:ts]
                end
              end
              $log.info "read_request addr=#{last_updated_addr}"
              socket.write read_request(last_updated_addr)
              metrics[last_updated_addr][:requested] = Time.now.to_i # don't double request metrics
            when 0x6A # read response
              addr = data.unpack1("S<")
              if (v = metrics[addr])
                value = data.unpack1(v[:type], offset: 2)
                v[:value] = value / v.fetch(:factor, 1)
                v[:ts] = (Time.now.to_f * 1000).to_i
                $log.info "read_response addr=#{addr} name=\"#{v[:name]}\" value=#{v[:value]}"
              else
                $log.warn "read_response address_not_found=#{addr}"
              end
              ack(socket)
            when 0x68, 0xEE, 0x6D # broadcast, ?, version/model
              $log.debug "ignoring_command=0x#{command.to_s(16)}"
              $log.debug { IO::Buffer.for(data).hexdump } unless data.empty?
              ack(socket)
            else
              $log.warn "unexpected_command=0x#{command.to_s(16)}"
              $log.warn { IO::Buffer.for(data).hexdump } unless data.empty? 
              ack(socket)
            end
          else
            $log.debug "read_byte=0x#{byte.to_s(16)}"
          end
        end
      end
    end

    def read_request(addr)
      # start of msg, read request, length, 16 bit address, checksum
      msg = [0xC0, 0x69, 0x02, addr].pack("CCCS<")
      [checksum(msg)].pack("C", buffer: msg)
    end

    def ack(socket)
      $log.debug "response=ack"
      socket.putc 0x06
    end

    def nack(socket)
      $log.debug "response=nack"
      socket.putc 0x15
    end

    def checksum(data)
      checksum = 0
      data.each_byte { |b| checksum ^= b }
      if checksum == 0x5C
        checksum = 0xC5
      end
      checksum
    end
  end
end

$stdout.sync = true
Thread.abort_on_exception = true
Nibe.run
